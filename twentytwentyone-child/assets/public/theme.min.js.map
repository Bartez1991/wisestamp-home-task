{"version":3,"sources":["theme.min.js"],"names":["document","addEventListener","heroBtnsListener","callback","btns","getElementsByClassName","Array","prototype","filter","call","btn","e","preventDefault","this","countdown","element","range","clearInterval","interval","setInterval","weekTextEnd","moment","duration","weeks","dayTextEnd","days","textContent","hours","minutes","seconds","item","querySelector","style","color","dataset","currentDate","Date","endDate","endOf"],"mappings":"AAAAA,SAASC,iBAAiB,mBAAoB,KAM5C,MAAMC,EAAoBC,IACxB,IACEC,EADYJ,SAASK,uBAAuB,gBAAgB,GAC7CA,uBAAuB,gBAExCC,MAAMC,UAAUC,OAAOC,KAAKL,EAAMM,IAChCA,EAAIT,iBAAiB,SAAS,SAAUU,GACtCA,EAAEC,iBAEFT,EAASU,YA8BTC,EAAY,CAACC,EAASC,KAC1BC,cAAcC,GAEd,IAAIA,EAAWC,YAAY,KAGzB,IAAIC,GADJJ,EAAQK,OAAOC,SAASN,EAAQ,IAAM,iBACdO,QAAU,EAAI,IAAM,GAC1CC,EAAaR,EAAMS,OAAS,EAAI,IAAM,GAExCV,EAAQW,YAAc,GAAGV,EAAMO,eAAeH,MAAgBJ,EAAMS,aAAaD,MAAeR,EAAMW,WAAWX,EAAMY,aAAaZ,EAAMa,aACzI,MAML3B,EArC0B4B,IACV9B,SAASK,uBAAuB,gBAAgB,GAC5C0B,cAAc,eAE1BC,MAAMC,MAAQH,EAAKI,QAAQD,QAkCnC/B,EA/B0B,KACxB,IAAIiC,EAAc,IAAIC,KACpBC,EAAUhB,OAAOc,GAAaG,MAAM,SACpCtB,EAAQK,OAAOC,SAASe,EAAUF,EAAa,gBAC/CpB,EAAUf,SAAS+B,cAAc,cACjCX,EAAcJ,EAAMO,QAAU,EAAI,IAAM,GACxCC,EAAaR,EAAMS,OAAS,EAAI,IAAM,GAGxCV,EAAQW,YAAc,GAAGV,EAAMO,eAAeH,MAAgBJ,EAAMS,aAAaD,MAAeR,EAAMW,WAAWX,EAAMY,aAAaZ,EAAMa,YAE1If,EAAUC,EAASC","file":"theme.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n\r\n  /**\r\n   * \r\n   * @param {function} callback \r\n   */\r\n  const heroBtnsListener = (callback) => {\r\n    let wrapper = document.getElementsByClassName('hero-content')[0],\r\n      btns = wrapper.getElementsByClassName('button-color');\r\n\r\n    Array.prototype.filter.call(btns, btn => {\r\n      btn.addEventListener('click', function (e) {\r\n        e.preventDefault();\r\n        // Run Callback after Click Button\r\n        callback(this);\r\n      });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Change Title color\r\n   * @param {NodeList} item \r\n   */\r\n  const changeTitleColor = (item) => {\r\n    let wrapper = document.getElementsByClassName('hero-content')[0],\r\n      title = wrapper.querySelector('.title-hero');\r\n    // Set Title Color\r\n    title.style.color = item.dataset.color;\r\n  };\r\n\r\n  const getMonthDateRange = () => {\r\n    let currentDate = new Date(), // Get Current Day\r\n      endDate = moment(currentDate).endOf('month'), // Clone the Value Before .endOf()\r\n      range = moment.duration(endDate - currentDate, 'milliseconds'), // Timestamp Duration\r\n      element = document.querySelector('.countdown'), // Target Element\r\n      weekTextEnd = range.weeks() > 1 ? 's' : '', // Add end to the week label\r\n      dayTextEnd = range.days() > 1 ? 's' : ''; // Add end to the week label\r\n\r\n    // Set Countdown Timer\r\n    element.textContent = `${range.weeks()} week${weekTextEnd}, ${range.days()} day${dayTextEnd}, ${range.hours()}:${range.minutes()}:${range.seconds()}`;\r\n    // \r\n    countdown(element, range);\r\n  };\r\n\r\n  const countdown = (element, range) => {\r\n    clearInterval(interval);\r\n\r\n    var interval = setInterval(() => {\r\n      // Update Timestamp Duration\r\n      range = moment.duration(range - 1000, 'milliseconds');\r\n      let weekTextEnd = range.weeks() > 1 ? 's' : '',\r\n        dayTextEnd = range.days() > 1 ? 's' : '';\r\n      // Set New Value for Countdown Timer\r\n      element.textContent = `${range.weeks()} week${weekTextEnd}, ${range.days()} day${dayTextEnd}, ${range.hours()}:${range.minutes()}:${range.seconds()}`;\r\n    }, 1000);\r\n\r\n  }\r\n\r\n\r\n\r\n  heroBtnsListener(changeTitleColor);\r\n  heroBtnsListener(getMonthDateRange);\r\n});"]}